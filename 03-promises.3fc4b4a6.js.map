{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAUF,SAASC,cAAc,uBACjCE,EAASH,SAASC,cAAc,sBAChCG,EAAWJ,SAASC,cAAc,wBACpBD,SAASC,cAAc,yBA6B3C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,aAAY,KACNH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CArCbQ,QAAQC,IAAIC,OAAOb,EAASc,QAE5BnB,EAAOoB,iBAAiB,UAExB,SAAkBC,GAChBA,EAAMC,iBAEN,IAAIC,EAAQL,OAAOf,EAAQgB,OACvBK,EAAON,OAAOd,EAAOe,OACrBM,EAASP,OAAOb,EAASc,OAE7B,IAAK,IAAIO,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACrDpB,EAAcoB,EAAUH,GACrBI,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBoB,EAAA9B,GAAS+B,OAAOC,QACd,uBAAqBvB,QAAiBC,MAAU,IAGnDuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBoB,EAAA9B,GAAS+B,OAAOG,QACd,sBAAoBzB,QAAeC,MAAU,IAGnDe,GAASC,EAEXxB,EAAOiC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector(`.form`);\nconst delayEl = document.querySelector(`input[name=\"delay\"]`);\nconst stepEl = document.querySelector(`input[name=\"step\"]`);\nconst amountEl = document.querySelector(`input[name=\"amount\"]`);\nconst submitBtnEl = document.querySelector(`button[type=\"submit\"]`);\nconsole.dir(Number(amountEl.value));\n\nformEl.addEventListener(`submit`, onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  let delay = Number(delayEl.value);\n  let step = Number(stepEl.value);\n  let amount = Number(amountEl.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n  formEl.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setInterval(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$delayEl","$47d4ff9957288465$var$stepEl","$47d4ff9957288465$var$amountEl","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setInterval","console","dir","Number","value","addEventListener","event","preventDefault","delay1","step","amount","position1","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.3fc4b4a6.js.map"}