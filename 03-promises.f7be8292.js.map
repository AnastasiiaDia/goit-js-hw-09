{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAe,SACjCC,EAAUF,SAASC,cAAe,uBAClCE,EAASH,SAASC,cAAe,sBACjCG,EAAWJ,SAASC,cAAe,wBACrBD,SAASC,cAAe,yBA+B5C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAvCPQ,QAAQC,IAAIC,OAAOb,EAASc,QAE5BnB,EAAOoB,iBAAkB,UAEzB,SAAkBC,GAChBA,EAAMC,iBAON,IALA,IAAIC,EAAQL,OAAOf,EAAQgB,OACvBK,EAAON,OAAOd,EAAOe,OACrBM,EAASP,OAAOb,EAASc,OAGpBO,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAGhCpB,EAFWoB,EACXH,GAASC,GAENG,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBqB,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAGjDyB,OAAM,SAAAL,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBqB,EAAA/B,GAASgC,OAAOI,QACd,sBAAqCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAInDR,EAAOmC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector(`.form`);\nconst delayEl = document.querySelector(`input[name=\"delay\"]`);\nconst stepEl = document.querySelector(`input[name=\"step\"]`);\nconst amountEl = document.querySelector(`input[name=\"amount\"]`);\nconst submitBtnEl = document.querySelector(`button[type=\"submit\"]`);\nconsole.dir(Number(amountEl.value));\n\nformEl.addEventListener(`submit`, onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  let delay = Number(delayEl.value);\n  let step = Number(stepEl.value);\n  let amount = Number(amountEl.value);\n  let position = 0;\n\n  for (let i = 1; i <= amount; i += 1) {\n    position = i;\n    delay += step;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  formEl.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$delayEl","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","dir","Number","value","addEventListener","event","preventDefault","delay1","step","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.f7be8292.js.map"}